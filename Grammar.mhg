@echo off
setlocal EnableDelayedExpansion

:: Initialize variables
set "sourceFile=source.tl"
set "outputJson=program.json"
set "outputAsm=program.asm"
set "errorFlag=0"
set "lineNumber=0"
set "functionStack="
set "askFlag=0"
set "allowFlag=0"
set "maxStackDepth=100"   :: Set a maximum stack depth to prevent stack overflow

:: Step 1: Read ToggleLang source file into JSON and handle complex parsing
echo Parsing ToggleLang source code...

:: Start building the JSON output
(
    echo {
    echo   "main": {
    echo     "type": "function",
    echo     "operations": [
) > %outputJson%

:: Read source file and parse line by line
for /f "tokens=*" %%i in (%sourceFile%) do (
    set /a lineNumber+=1
    set "line=%%i"

    :: Skip empty lines or comments (lines starting with "//")
    echo !line! | findstr /r "^$" > nul
    if !errorlevel! == 0 (
        continue
    )
    echo !line! | findstr /r "^//" > nul
    if !errorlevel! == 0 (
        continue
    )

    :: Process "compute" operation
    echo !line! | findstr /i "^compute" > nul
    if !errorlevel! == 0 (
        set "operation=compute"
        set "args=!line:compute=!"
        echo       { >> %outputJson%
        echo         "type": "compute", >> %outputJson%
        echo         "arguments": [!args!], >> %outputJson%
        echo         "result": "result" >> %outputJson%
        echo       }, >> %outputJson%
        goto :continue
    )

    :: Process "if" statement
    echo !line! | findstr /i "^if" > nul
    if !errorlevel! == 0 (
        set "operation=if"
        set "condition=!line:if=!"
        echo       { >> %outputJson%
        echo         "type": "if", >> %outputJson%
        echo         "condition": "!condition!", >> %outputJson%
        echo         "then": [ >> %outputJson%
        echo           { >> %outputJson%
        echo             "type": "send", >> %outputJson%
        echo             "to": "MEMORY" >> %outputJson%
        echo           } >> %outputJson%
        echo         ] >> %outputJson%
        echo       }, >> %outputJson%
        goto :continue
    )

    :: Process "while" loop
    echo !line! | findstr /i "^while" > nul
    if !errorlevel! == 0 (
        set "operation=while"
        set "condition=!line:while=!"
        echo       { >> %outputJson%
        echo         "type": "while", >> %outputJson%
        echo         "condition": "!condition!", >> %outputJson%
        echo         "operations": [ >> %outputJson%
        echo           { >> %outputJson%
        echo             "type": "compute", >> %outputJson%
        echo             "arguments": [result, 1], >> %outputJson%
        echo             "result": "result" >> %outputJson%
        echo           } >> %outputJson%
        echo         ] >> %outputJson%
        echo       }, >> %outputJson%
        goto :continue
    )

    :: Process "return" statement
    echo !line! | findstr /i "^return" > nul
    if !errorlevel! == 0 (
        set "operation=return"
        set "value=!line:return=!"
        echo       { >> %outputJson%
        echo         "type": "return", >> %outputJson%
        echo         "value": "!value!" >> %outputJson%
        echo       }, >> %outputJson%
        goto :continue
    )

    :: Process "break" statement
    echo !line! | findstr /i "^break" > nul
    if !errorlevel! == 0 (
        set "operation=break"
        echo       { >> %outputJson%
        echo         "type": "break" >> %outputJson%
        echo       }, >> %outputJson%
        goto :continue
    )

    :: Process "continue" statement
    echo !line! | findstr /i "^continue" > nul
    if !errorlevel! == 0 (
        set "operation=continue"
        echo       { >> %outputJson%
        echo         "type": "continue" >> %outputJson%
        echo       }, >> %outputJson%
        goto :continue
    )

    :: Process Arrays (nested or multidimensional)
    echo !line! | findstr /i "^array" > nul
    if !errorlevel! == 0 (
        set "operation=array"
        set "args=!line:array=!"
        echo       { >> %outputJson%
        echo         "type": "array", >> %outputJson%
        echo         "elements": !args! >> %outputJson%
        echo       }, >> %outputJson%
        goto :continue
    )

    :: Process Objects (nested objects)
    echo !line! | findstr /i "^object" > nul
    if !errorlevel! == 0 (
        set "operation=object"
        set "args=!line:object=!"
        echo       { >> %outputJson%
        echo         "type": "object", >> %outputJson%
        echo         "properties": !args! >> %outputJson%
        echo       }, >> %outputJson%
        goto :continue
    )

    :: Handle unrecognized operations and add error reporting
    echo ERROR: Unrecognized operation at line !lineNumber! - !line! >> %outputJson%
    set "errorFlag=1"

    :continue
)

echo   ]
echo   }
echo } >> %outputJson%

:: Step 2: Refactor Assembly Generation for Modular Code with Complex Data Structures
echo Converting JSON to Assembly...

:: Initialize assembly code
echo ; ToggleLang to Assembly Code >> %outputAsm%
echo section .data >> %outputAsm%
echo result dd 0 >> %outputAsm%
echo sensorData dd 0 >> %outputAsm%
echo loopResult dd 0 >> %outputAsm%
echo funcResult dd 0 >> %outputAsm%
echo arrayData dd 0, 0, 0 >> %outputAsm%
echo nestedArray dd 0, 0, 0, 0, 0, 0 >> %outputAsm%

:: Process operations from JSON and generate assembly
for /f "tokens=*" %%i in (%outputJson%) do (
    set "operation=%%i"

    :: Handle compute operation
    echo !operation! | findstr /i "compute" > nul
    if !errorlevel! == 0 (
        call :generate_compute
    )

    :: Handle if statement
    echo !operation! | findstr /i "if" > nul
    if !errorlevel! == 0 (
        call :generate_if
    )

    :: Handle while loop
    echo !operation! | findstr /i "while" > nul
    if !errorlevel! == 0 (
        call :generate_while
    )

    :: Handle return statement
    echo !operation! | findstr /i "return" > nul
    if !errorlevel! == 0 (
        call :generate_return
    )

    :: Handle break statement
    echo !operation! | findstr /i "break" > nul
    if !errorlevel! == 0 (
        call :generate_break
    )

    :: Handle continue statement
    echo !operation! | findstr /i "continue" > nul
    if !errorlevel! == 0 (
        call :generate_continue
    )

    :: Handle array (nested/multidimensional)
    echo !operation! | findstr /i "array" > nul
    if !errorlevel! == 0 (
        call :generate_array
    )

    :: Handle object
    echo !operation! | findstr /i "object" > nul
    if !errorlevel! == 0 (
        call :generate_object
    )
)

:: Handle Errors During Compilation
if !errorFlag! == 1 (
    echo Compilation failed due to errors!
    exit /b 1
)

:: Step 3: Assemble and Link Assembly Code
echo Assembling the Assembly Code...
nasm -f win64 %outputAsm% -o program.obj

:: Step 4: Link the Object Code to Create Executable
echo Linking the Object Code...
GoLink /entry _start program.obj

:: Step 5: Run the Executable
echo Running the Executable...
program.exe

endlocal

:: Generate Assembly for Compute Operation
:generate_compute
echo ; Compute operation >> %outputAsm%
echo mov eax, [result] >> %outputAsm%
echo add eax, 1 >> %outputAsm%
echo mov [result], eax >> %outputAsm%
goto :eof

:: Generate Assembly for If Statement
:generate_if
echo ; If Statement >> %outputAsm%
echo cmp eax, 0 >> %outputAsm%
echo je skip_if >> %outputAsm%
echo ; If body here >> %outputAsm%
echo skip_if: >> %outputAsm%
goto :eof

:: Generate Assembly for While Loop
:generate_while
echo ; While Loop >> %outputAsm%
echo cmp eax, 0 >> %outputAsm%
echo je skip_while >> %outputAsm%
echo ; While body here >> %outputAsm%
echo skip_while: >> %outputAsm%
goto :eof

:: Generate Assembly for Return Statement
:generate_return
echo ; Return Statement >> %outputAsm%
echo ret >> %outputAsm%
goto :eof

:: Generate Assembly for Break Statement
:generate_break
echo ; Break Statement >> %outputAsm%
echo jmp skip_loop >> %outputAsm%
goto :eof

:: Generate Assembly for Continue Statement
:generate_continue
echo ; Continue Statement >> %outputAsm%
echo jmp continue_loop >> %outputAsm%
goto :eof

:: Generate Assembly for Array (Nested/Multidimensional)
:generate_array
echo ; Array Declaration >> %outputAsm%
echo ; Array initialization code here >> %outputAsm%
goto :eof

:: Generate Assembly for Object
:generate_object
echo ; Object Declaration >> %outputAsm%
echo ; Object initialization code here >> %outputAsm%
goto :eof
